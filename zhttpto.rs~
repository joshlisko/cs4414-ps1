//
// zhttpto.rs
//
// University of Virginia - cs4414 Fall 2013
// Weilin Xu and David Evans
// Version 0.1


//Josh Lisko, jpl4ke
//CS 4414
//PS1

extern mod extra;



use extra::uv;
use extra::{net_ip, net_tcp};
use std::str;
use std::io;
use std::path;


static BACKLOG: uint = 5;
static PORT:    uint = 4414;
static IPV4_LOOPBACK: &'static str = "127.0.0.1";
static mut visitor_count: uint = 0;

unsafe fn new_connection_callback(new_conn :net_tcp::TcpNewConnection, _killch: std::comm::SharedChan<Option<extra::net_tcp::TcpErrData>>)
{
    do spawn {
        let accept_result = extra::net_tcp::accept(new_conn);
        match accept_result {
            Err(err) => {
               println(fmt!("Connection error: %?", err));
            },  
            Ok(sock) => {
                let peer_addr: ~str = net_ip::format_addr(&sock.get_peer_addr());
                println(fmt!("Received connection from: %s", peer_addr));
                
                let read_result = net_tcp::read(&sock, 0u);
                match read_result {
                    Err(err) => {
                        println(fmt!("Receive error: %?", err));
                    },
                    Ok(bytes) => {
			visitor_count += 1;
			println(fmt!("Total Requests: %?", visitor_count));

                        let request_str = str::from_bytes(bytes.slice(0, bytes.len() - 1));

			let path_index_start = request_str.find_str("/");
			let path_index_end = request_str.find_str("HTTP/1.1");
			let path_index_start_num = path_index_start.unwrap();
			let path_index_end_num = path_index_end.unwrap();
			let file_str = request_str.slice(path_index_start_num+1, path_index_end_num-1);
			
			//let cwd = std::os::getcwd();
			//let full_path: Path = cwd.push(file_str);
			//println("----------------------------------");
			//println(fmt!("cwd: %?", cwd));
			//println(fmt!("path: %?", file_str));
			//println(fmt!("full path: %?", full_path.dirname()));
			//println("----------------------------------");	
			//println(fmt!("Path: %s", request_str));
                        //println(fmt!("Request received:\n%s", request_str));

			if(!(file_str.is_empty())){
		                let file: Result<@Reader, ~str>;
				file = io::file_reader(~path::Path(file_str));
				
				if(file.is_ok()){
		
					let file_contents = file.unwrap(); 
					let file_contents_arr  = file_contents.read_lines();
					let mut file_contents_str: ~str = ~"";
					println(fmt!("Serving Request: "));
					for file_contents_arr.iter().advance |x| {
						println(*x);
						file_contents_str.push_str(*x);
						file_contents_str.push_str("\n");
					}					

					let response: ~str = file_contents_str;
					//net_tcp::write(&sock, response.as_bytes_with_null_consume());
					net_tcp::write(&sock, file_contents.read_lines());
				}
				else{
					let response: ~str = ~
				    		"HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n
	                             		<doctype !html><html><head><title>Hello, Rust!</title>
	                            		 <style>body { background-color: #111; color: #FFEEAA }
	                                   		 h1 { font-size:2cm; text-align: center; color: black; text-shadow: 0 0 4mm red}
	                            		 </style></head>
	                            		 <body>
	                            		 <h1>File Not Found!</h1>
	                             		</body></html>\r\n";
					net_tcp::write(&sock, response.as_bytes_with_null_consume());
				}
			}
			
			else if(file_str.is_empty()){
				let response: ~str = ~
				    "HTTP/1.1 200 OK\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n
	                             <doctype !html><html><head><title>Hello, Rust!</title>
	                             <style>body { background-color: #111; color: #FFEEAA }
	                                    h1 { font-size:2cm; text-align: center; color: black; text-shadow: 0 0 4mm red}
	                             </style></head>
	                             <body>
	                             <h1>Greetings, Rusty!</h1>
	                             </body></html>\r\n";
				net_tcp::write(&sock, response.as_bytes_with_null_consume());
			}
			
                        
                    },
                }; 
            }
        }
    };
}

fn main() {
    net_tcp::listen(net_ip::v4::parse_addr(IPV4_LOOPBACK), PORT, BACKLOG,
                    &uv::global_loop::get(),
                    |_chan| { println(fmt!("Listening on tcp port %u ...", PORT)); },
                    new_connection_callback);
}
